using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using log4net;
using log4net.Repository;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Hosting.Server.Features;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using UWay.Skynet.Cloud.Data;
using UWay.Skynet.Cloud.Helpers;
using UWay.Skynet.Cloud.Web.Core;
using UWay.Skynet.Cloud.Web.Core.Nacos;
using UWay.Skynet.Cloud.Extensions;
using UWay.Skynet.Cloud.IoC;
using UWay.Skynet.Cloud.Protocal;

namespace UWay.Skynet.Cloud.ApiDemo
{
    public class Startup : BasicStartup
    {
        public Startup(IConfiguration configuration) : base(configuration)
        {

        }

        public IServiceProvider ConfigureServices(IServiceCollection services)
        {
            return BacicConfigureServices(services);
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            //var bindingUrl = app.ServerFeatures.Get<IServerAddressesFeature>().Addresses.First();
            BasicConfigure(app, env);
        }
        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.


        public override void ConfigureEnviroment(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            //else
            //{
            //    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
            //    app.UseHsts();
            //}

            //app.UseHttpsRedirection();
        }

        public override void ConfigureMvc(IApplicationBuilder app)
        {
            app.UseMvc();
        }

        public override void ConfigureNacos(IApplicationBuilder app)
        {

            app.UseNacosAspNetCore();
        }

        public override void ConfigureSwagger(IApplicationBuilder app)
        {
            app.UseSwagger();
            app.UseSwaggerUi3();
        }

        public override void RegistryCookie(IServiceCollection services)
        {
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
        }


        public override void RegistrySwagger(IServiceCollection services)
        {
            services.AddSwaggerDocument(config =>
            {
                config.PostProcess = document =>
                {
                    document.Info.Version = "v1";
                    document.Info.Title = "Test API";
                    document.Info.Description = "A simple ASP.NET Core web API";
                    document.Info.TermsOfService = "None";
                    document.Info.Contact = new NSwag.SwaggerContact
                    {
                        Name = "magic.s.g.xie",
                        Email = "xiesg@uway.cn",
                        Url = "https://uway.cn"
                    };
                    document.Info.License = new NSwag.SwaggerLicense
                    {
                        Name = "Use under UWay",
                        Url = "https://uway.cn/license"
                    };
                };
            });
        }
    }

    //public class Startup
    //{
    //    public static ILoggerRepository Repository { get; set; }

    //    private bool userNacos;
    //    public Startup(IConfiguration configuration)
    //    {
    //        Configuration = configuration;
    //        userNacos = Configuration.GetSection("appSettings").GetValue<bool>("USE_NACOS");
    //        //初始化log4net
    //        Repository = LogManager.CreateRepository("NETCoreRepository");
    //        Log4NetHelper.SetConfig(Repository, "log4net.config");
    //    }

    //    public IConfiguration Configuration { get; }

    //    // This method gets called by the runtime. Use this method to add services to the container.
    //    public IServiceProvider ConfigureServices(IServiceCollection services)
    //    {
    //        if (userNacos == true)
    //            RegistryNacos(services);
    //        RegistryCookie(services);
    //        RegistrySwagger(services);
    //        //
    //        return InitIoC(services);
    //    }

    //    public void RegistryNacos(IServiceCollection services)
    //    {
    //        services.AddNacosAspNetCore(Configuration);
    //    }

    //    public void RegistryCookie(IServiceCollection services)
    //    {
    //        services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
    //    }

    //    public  void RegistrySwagger(IServiceCollection services)
    //    {
    //        services.AddSwaggerDocument(config =>
    //        {
    //            config.PostProcess = document =>
    //            {
    //                document.Info.Version = "v1";
    //                document.Info.Title = "Test API";
    //                document.Info.Description = "A simple ASP.NET Core web API";
    //                document.Info.TermsOfService = "None";
    //                document.Info.Contact = new NSwag.SwaggerContact
    //                {
    //                    Name = "magic.s.g.xie",
    //                    Email = "xiesg@uway.cn",
    //                    Url = "https://uway.cn"
    //                };
    //                document.Info.License = new NSwag.SwaggerLicense
    //                {
    //                    Name = "Use under UWay",
    //                    Url = "https://uway.cn/license"
    //                };
    //            };
    //        });
    //    }

    //    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
    //    public void Configure(IApplicationBuilder app, IHostingEnvironment env)
    //    {
    //        //Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
    //        ConfigureEnviroment(app, env);
    //        ConfigureSwagger(app);

    //        if (userNacos == true)
    //            ConfigureNacos(app);
    //        ConfigureMvc(app);
    //    }


    //    /**
    //     * Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
    //     * 
    //     * */
    //    public void ConfigureEnviroment(IApplicationBuilder app, IHostingEnvironment env)
    //    {
    //        if (env.IsDevelopment())
    //        {
    //            app.UseDeveloperExceptionPage();

    //        }
    //    }

    //    public void ConfigureSwagger(IApplicationBuilder app)
    //    {
    //            app.UseSwagger();
    //                   app.UseSwaggerUi3();
    //        }

    //    public void ConfigureMvc(IApplicationBuilder app)
    //        {
    //        app.UseMvc();
    //    }

    //    public  void ConfigureNacos(IApplicationBuilder app)
    //    {
    //        app.UseNacosAspNetCore();
    //    }

    //    /// <summary>
    //    /// IoC初始化
    //    /// </summary>
    //    /// <param name="services"></param>
    //    /// <returns></returns>
    //    private IServiceProvider InitIoC(IServiceCollection services)
    //    {
    //        var dbConnectionString = Configuration.GetConnectionString("DB_Oracle_ConnStr");
    //        var provider = Configuration.GetSection("appSettings").GetValue<string>("DB_Oracle_ConnStr_Provider");
    //        var useMainDb = Configuration.GetSection("appSettings").GetValue<bool>("USE_MAIN_DB");
    //        var useDbRoute = Configuration.GetSection("appSettings").GetValue<bool>("USE_DB_ROUTE");

    //        var entityAssmbly = Configuration.GetSection("appSettings").GetValue<string>("ENTITY_ASSMBLY");
    //        var serviceInterfaceAssmbly = Configuration.GetSection("appSettings").GetValue<string>("SERVICE_INTERFACE_ASSMBLY");
    //        var serviceImplAssembly = Configuration.GetSection("appSettings").GetValue<string>("SERVICE_ASSMBLY");

    //        IList<DbContextOption> dbContextOptions = new List<DbContextOption>();
    //        if (useMainDb)
    //        {
    //            dbContextOptions.Add(GetMainDbContextOption(new DbContextOption
    //            {
    //                Container = "DB_Oracle_ConnStr_Provider",
    //                ConnectionString = dbConnectionString,
    //                ModuleAssemblyName = "Skynet.Cloud.Framework",
    //                Provider = provider,
    //                Logger = () => SqlLog.Console
    //            }, entityAssmbly));
    //        }

    //        if (useDbRoute)
    //        {
    //            dbContextOptions.AddRange(GetRouteDbContextOptions(new DbContextOption
    //            {
    //                Container = "DB_Oracle_ConnStr_Provider",
    //                ConnectionString = dbConnectionString,
    //                ModuleAssemblyName = "Skynet.Cloud.Framework",
    //                Provider = provider,
    //                Logger = () => SqlLog.Console
    //            }));
    //        }

    //        if (dbContextOptions.Count > 0)
    //            DbConfiguration.Configure(dbContextOptions);
    //        services
    //         .AddScopedAssembly(serviceInterfaceAssmbly, serviceImplAssembly);
    //        return AspectCoreContainer.BuildServiceProvider(services);//接入AspectCore.Injector
    //    }



    //    private DbContextOption GetMainDbContextOption(DbContextOption dbContextOption, string moduleAssemblyName = "Skynet.Cloud.Upms.Entity")
    //    {
    //        using (var connContext = new ProtocolDbContext(dbContextOption))
    //        {
    //            var conn = connContext.Set<ProtocolInfo>().Where(p => p.ProtocalType == ProtocalType.DB && p.ContainerName.Equals("upms")).ToList();

    //            if (conn != null && conn.Count > 0)
    //            {
    //                var item = conn.FirstOrDefault();
    //                var connDetail = connContext.Set<ProtocolCfgInfo>().Get(item.CfgID);
    //                //var connDetail = details.FirstOrDefault(p => p.CfgID == item.CfgID);
    //                if (connDetail != null)
    //                {

    //                    if (connDetail.ProviderName == DbProviderNames.Oracle && !string.IsNullOrWhiteSpace(connDetail.ServerName))
    //                    {
    //                        connDetail.Driver = DbProviderNames.Oracle_Managed_ODP;
    //                        item.DataBaseName = connDetail.ServerName;
    //                    }
    //                    var connectStrings = dbContextOption.ConnectionString;
    //                    if (connDetail.ProviderName == DbProviderNames.Oracle)
    //                        connectStrings = BuildOracleClientConnectionString(item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
    //                    else if (connDetail.ProviderName == DbProviderNames.Oracle_Managed_ODP)
    //                        connectStrings = BuildOracleManagedODPConnectionString(connDetail.Url, connDetail.Port, item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
    //                    else if (connDetail.ProviderName == DbProviderNames.Oracle_ODP)
    //                        connectStrings = BuildOracleODPConnectionString(connDetail.Url, connDetail.Port, item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
    //                    else if (connDetail.ProviderName == DbProviderNames.SqlServer)
    //                        connectStrings = BuildSqlServerConnectionString(connDetail.Url, connDetail.DesUserID, connDetail.DesPassword, item.DataBaseName, connDetail.Port);
    //                    else if (connDetail.ProviderName == DbProviderNames.MySQL)
    //                        connectStrings = BuildMySqlConnectionString(connDetail.Url, connDetail.DesUserID, connDetail.DesPassword, item.DataBaseName, connDetail.Port);
    //                    return new DbContextOption()
    //                    {
    //                        Container = "upms",
    //                        Provider = connectStrings,
    //                        ConnectionString = connDetail.ProviderName,
    //                        ModuleAssemblyName = moduleAssemblyName,
    //                        Logger = () => SqlLog.Console
    //                    };

    //                }
    //            }

    //            return new DbContextOption()
    //            {
    //                Container = "upms",
    //                Provider = dbContextOption.Provider,
    //                ConnectionString = dbContextOption.ConnectionString,
    //                ModuleAssemblyName = moduleAssemblyName,
    //                Logger = () => SqlLog.Console
    //            };

    //        }

    //    }


    //    private IEnumerable<DbContextOption> GetRouteDbContextOptions(DbContextOption dbContextOption)
    //    {
    //        //var keys =  new List<string>();
    //        IDictionary<string, DbContextOption> dbcs = new Dictionary<string, DbContextOption>();

    //        foreach (NetType item in Enum.GetValues(typeof(NetType)))
    //        {
    //            //var v = item;//男[女]
    //            //var v2 = (int)item;//0[1]
    //            //var t = item.GetType();//{Name = "Test" FullName = "BaseControl.Enum.Test"}
    //            //var g = item.ToString();//"男"["女"]
    //            foreach (DataBaseType db in Enum.GetValues(typeof(DataBaseType)))
    //            {
    //                string key = ((int)item) + "_" + ((int)db);
    //                if (!dbcs.ContainsKey(key))
    //                {
    //                    //keys.Add(key);
    //                    dbcs.Add(key, new DbContextOption()
    //                    {
    //                        Container = key,
    //                        Provider = dbContextOption.Provider,
    //                        ConnectionString = dbContextOption.ConnectionString,
    //                        MappingFile = getMappingFile(item, db),
    //                        ModuleAssemblyName = "Skynet.Cloud."

    //                    });
    //                }
    //            }

    //        }

    //        using (var connContext = new ProtocolDbContext(dbContextOption))
    //        {
    //            var conn = connContext.Set<ProtocolInfo>().Where(p => p.ProtocalType == ProtocalType.DB).ToList();
    //            var details = connContext.Set<ProtocolCfgInfo>().ToList();
    //            if (conn != null && conn.Count > 0)
    //            {
    //                foreach (var item in conn)
    //                {

    //                    var connDetail = details.FirstOrDefault(p => p.CfgID == item.CfgID);
    //                    if (connDetail != null)
    //                    {

    //                        if (connDetail.ProviderName == DbProviderNames.Oracle && !string.IsNullOrWhiteSpace(connDetail.ServerName))
    //                        {
    //                            connDetail.Driver = DbProviderNames.Oracle_Managed_ODP;
    //                            item.DataBaseName = connDetail.ServerName;
    //                        }
    //                        var connectStrings = dbContextOption.ConnectionString;
    //                        if (connDetail.ProviderName == DbProviderNames.Oracle)
    //                            connectStrings = BuildOracleClientConnectionString(item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
    //                        else if (connDetail.ProviderName == DbProviderNames.Oracle_Managed_ODP)
    //                            connectStrings = BuildOracleManagedODPConnectionString(connDetail.Url, connDetail.Port, item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
    //                        else if (connDetail.ProviderName == DbProviderNames.Oracle_ODP)
    //                            connectStrings = BuildOracleODPConnectionString(connDetail.Url, connDetail.Port, item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
    //                        else if (connDetail.ProviderName == DbProviderNames.SqlServer)
    //                            connectStrings = BuildSqlServerConnectionString(connDetail.Url, connDetail.DesUserID, connDetail.DesPassword, item.DataBaseName, connDetail.Port);
    //                        else if (connDetail.ProviderName == DbProviderNames.MySQL)
    //                            connectStrings = BuildMySqlConnectionString(connDetail.Url, connDetail.DesUserID, connDetail.DesPassword, item.DataBaseName, connDetail.Port);
    //                        if (dbcs.ContainsKey(item.ContainerName))
    //                        {
    //                            dbcs[item.ContainerName].ConnectionString = connectStrings;
    //                            dbcs[item.ContainerName].Provider = connDetail.ProviderName;
    //                        }
    //                        else
    //                        {
    //                            var key = dbcs.Keys.FirstOrDefault(p => p.StartsWith(item.ContainerName));
    //                            if (!string.IsNullOrEmpty(key))
    //                            {
    //                                dbcs[key].ConnectionString = connectStrings;
    //                                dbcs[key].Provider = connDetail.ProviderName;
    //                            }
    //                        }


    //                    }
    //                }
    //            }
    //        }

    //        return dbcs.Values;

    //    }

    //    #region
    //    private string getMappingFile(NetType netType, DataBaseType dataBaseType)
    //    {
    //        return string.Format("uway.{0}.{1}.mapping.xml", netType, dataBaseType);
    //    }
    //    private string getMappingFile(ProtocolInfo protocolInfo)
    //    {

    //        if (!protocolInfo.ContainerName.Equals("DB_Oracle_ConnStr") && !protocolInfo.ContainerName.Equals("ufa"))
    //        {
    //            var key = protocolInfo.ContainerName.Split("_");
    //            var netGenerationType = NetType.LTE;
    //            if (key.Length >= 1)
    //            {
    //                netGenerationType = (NetType)int.Parse(key[0]);
    //            }

    //            var databaseType = DataBaseType.Normal;
    //            if (key.Length >= 2)
    //            {
    //                databaseType = (DataBaseType)int.Parse(key[1]);
    //            }
    //            //var files = Directory.EnumerateFiles(path, string.Format("uway.{0}.{1}.mapping.xml", netGenerationType, databaseType.ToString()));
    //            return getMappingFile(netGenerationType, databaseType);
    //        }

    //        return string.Empty;
    //    }

    //    private string BuildOracleClientConnectionString(string datasource, string uid, string pwd, bool IsConnPool, int CONNET_POOL_MAXACTIVE, int CONNET_POOL_MAXIDLE)
    //    {
    //        return string.Format("data source={0};user id={1};password={2};Pooling={3};Max Pool Size={4};Min Pool Size={5};", datasource, uid, pwd, IsConnPool, CONNET_POOL_MAXIDLE, CONNET_POOL_MAXACTIVE);
    //    }

    //    private string BuildOracleManagedODPConnectionString(string ip, int port, string datasource, string uid, string pwd, bool IsConnPool, int CONNET_POOL_MAXACTIVE, int CONNET_POOL_MAXIDLE)
    //    {
    //        return string.Format("data source={0}:{1}/{2};user id={3};password={4};Pooling={5};Max Pool Size={6};Min Pool Size={7};", ip, port, datasource, uid, pwd, IsConnPool, CONNET_POOL_MAXACTIVE, CONNET_POOL_MAXIDLE);
    //    }

    //    private string BuildOracleODPConnectionString(string ip, int port, string datasource, string uid, string pwd, bool IsConnPool, int CONNET_POOL_MAXACTIVE, int CONNET_POOL_MAXIDLE)
    //    {
    //        return string.Format(@"(DESCRIPTION =(ADDRESS_LIST =
    //                                (ADDRESS = (PROTOCOL = TCP)(HOST = {0})(PORT = {1}))
    //                                )
    //                                (CONNECT_DATA =
    //                                (SERVICE_NAME = {2})
    //                               )
    //                                );Persist Security Info=True;User ID={3};Password={4};;Pooling={5};Max Pool Size={6};Min Pool Size={7};", ip,
    //                                port,
    //                                 datasource,
    //                                 uid, pwd, IsConnPool, CONNET_POOL_MAXIDLE, CONNET_POOL_MAXACTIVE);
    //    }
    //    #endregion

    //    #region
    //    public string BuildMySqlConnectionString(string url, string uid, string pwd, string database, int port)
    //    {
    //        return string.Format("server = {0}; User Id = {1}; password = {2}; database = {3}; port = {4}; Charset = utf8; Persist Security Info = True",
    //            url, uid, pwd, database, port);
    //    }

    //    public string BuildSqlServerConnectionString(string url, string uid, string pwd, string database, int port)
    //    {
    //        return string.Format("Data Source = {0};Port={4};Initial Catalog = {1};User ID = {2}; Password={3};Integrated Security =false",
    //            url, database, uid, pwd, port);
    //    }


    //    public string BuildSqlServerConnectionString(string url, string uid, string pwd, string database)
    //    {
    //        return string.Format("Data Source = {0};Initial Catalog = {1};User ID = {2}; Password={3};Integrated Security =false",
    //            url, database, uid, pwd);
    //    }
    //    #endregion
    //}
}
