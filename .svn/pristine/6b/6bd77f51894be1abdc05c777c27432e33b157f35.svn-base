using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using UWay.Skynet.Cloud.Data.Common;
using UWay.Skynet.Cloud.Helpers;

namespace UWay.Skynet.Cloud.Data
{
    class TextSqlLog : ISqlLog
    {
        StringBuilder msg = new StringBuilder();


        static readonly string Version = "-- ULinq Version:" + Assembly.GetExecutingAssembly().GetName().Version.ToString();

        public void AddMessage(string message)
        {
            msg.AppendLine(message);
        }

        public void AddCommand(string commandText, NamedParameter[] parameters, object[] paramValues)
        {

            msg.AppendLine().AppendLine("------------------ULinq---------------").AppendLine(commandText);
            if (paramValues != null)
                this.AddParameters(parameters, paramValues);

            msg.AppendLine(Version);

            var dbContext = ExecuteContext.DbContext;
            if (dbContext != null)
            {
                msg.AppendLine("-- Key:" + dbContext.dbConfiguration.ConnectionString.Split(';')[0]);
                msg.AppendLine("-- DbProviderName:" + dbContext.dbConfiguration.DbProviderName);
            }


            var dialect = ExecuteContext.Dialect;
            if (dialect != null)
                msg.AppendLine("-- Dialect:" + dialect.GetType().Name);

            msg.AppendLine("-------------------End----------------");
        }

        public void AddParameters(NamedParameter[] parameters, object[] paramValues)
        {
            if (paramValues != null)
            {
                for (int i = 0, n = parameters.Length; i < n; i++)
                {
                    var p = parameters[i];
                    var v = paramValues[i];

                    if (v == null || v == DBNull.Value)
                        msg.AppendLine(string.Format("-- {0}:(DbType = {1}, Length = {2}, Value = NULL)", p.Name, p.sqlType.DbType, p.sqlType.Length));
                    else
                        msg.AppendLine(string.Format("-- {0}:(DbType = {1}, Length = {2}, Value = {3})", p.Name, p.sqlType.DbType, p.sqlType.Length, v));
                }


            }
        }

        public void LogError(string message)
        {
            msg.AppendLine().AppendLine(string.Format(" ------------ULinq {0}----------", "Error")).AppendLine(message);
        }

        public void LogError(string message, Exception ex)
        {
            msg.AppendLine().AppendLine(string.Format("------------------- ULinq{0} --------------- \r\n{3}\r\nmessage:{1}\r\nstacktrace:{2}", "Error", ex.Message, ex.StackTrace, message));
        }

        public void AddCommand(string commandText, DbParameterCollection paramters)
        {
            msg.AppendLine().AppendLine("------------------Sql Begin---------------").AppendLine(commandText);
            if (paramters != null)
            {
                foreach (DbParameter v in paramters)
                {

                    if (v == null || v.Value == DBNull.Value)
                        msg.AppendLine(string.Format("-- {0}:(DbType = {1}, Length = {2}, Value = NULL)", v.ParameterName, v.DbType, v.Size));
                    else
                        msg.AppendLine(string.Format("-- {0}:(DbType = {1}, Length = {2}, Value = {3})", v.ParameterName, v.DbType, v.Size, v.Value));
                }
            }

        }

        public void Log()
        {

            try
            {
                //ILogger logger = LoggerFactory.CreateLogger("sql");

                //if (msg.ToString().Contains("Error"))
                //{
                //    Log4NetHelper.WriteError(typeof(TextSqlLog), msg.ToString());
                //}
                //else
                //{
                //    Log4NetHelper.WriteInfo(typeof(TextSqlLog), msg.ToString());
                //}


            }
            catch (Exception ex)
            {
                //Log4NetHelper.WriteError(typeof(TextSqlLog), msg.ToString());
            }
            finally
            {
                msg.Clear();
            }

        }
    }
}
