using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using log4net;
using log4net.Repository;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using UWay.Skynet.Cloud.Data;
using UWay.Skynet.Cloud.Helpers;
using UWay.Skynet.Cloud.IoC;
using UWay.Skynet.Cloud.Protocal;
using UWay.Skynet.Cloud.Web.Core.Nacos;
using UWay.Skynet.Cloud.Extensions;
using System.IO;

namespace UWay.Skynet.Cloud.Web.Core
{

    public abstract class BasicStartup
    {
        public static ILoggerRepository Repository { get; set; }

        private bool userNacos = false;
        public BasicStartup(IConfiguration configuration)
        {
            Configuration = configuration;
            userNacos = Configuration.GetSection("appSettings").GetValue<bool>("USE_NACOS");
            //初始化log4net
            Repository = LogManager.CreateRepository("NETCoreRepository");
            Log4NetHelper.SetConfig(Repository, "log4net.config");
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public IServiceProvider BacicConfigureServices(IServiceCollection services)
        {
            if (userNacos == true)
                RegistryNacos(services);
            RegistryCookie(services);
            RegistrySwagger(services);
            //
            return InitIoC(services);
        }

        public void RegistryNacos(IServiceCollection services)
        {
            services.AddNacosAspNetCore(Configuration);
        }

        public abstract void RegistryCookie(IServiceCollection services);

        public abstract void RegistrySwagger(IServiceCollection services);

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void BasicConfigure(IApplicationBuilder app, IHostingEnvironment env)
        {
            //Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
            ConfigureEnviroment(app, env);
            ConfigureSwagger(app);
            
            if(userNacos == true)
                ConfigureNacos(app);
            ConfigureMvc(app);
        }


        /**
         * Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
         * 
         * */
        public abstract void ConfigureEnviroment(IApplicationBuilder app, IHostingEnvironment env);

        public abstract void ConfigureSwagger(IApplicationBuilder app);

        public abstract void ConfigureMvc(IApplicationBuilder app);

        public abstract void ConfigureNacos(IApplicationBuilder app);

        /// <summary>
        /// IoC初始化
        /// </summary>
        /// <param name="services"></param>
        /// <returns></returns>
        private IServiceProvider InitIoC(IServiceCollection services)
        {
            var dbConnectionString = Configuration.GetConnectionString("DB_Oracle_ConnStr");
            var provider = Configuration.GetSection("appSettings").GetValue<string>("DB_Oracle_ConnStr_Provider");
            var useMainDb = Configuration.GetSection("appSettings").GetValue<bool>("USE_MAIN_DB");
            var useDbRoute = Configuration.GetSection("appSettings").GetValue<bool>("USE_DB_ROUTE");

            var entityAssmbly = Configuration.GetSection("appSettings").GetValue<string>("ENTITY_ASSMBLY");
            var serviceInterfaceAssmbly = Configuration.GetSection("appSettings").GetValue<string>("SERVICE_INTERFACE_ASSMBLY");
            var serviceImplAssembly = Configuration.GetSection("appSettings").GetValue<string>("SERVICE_ASSMBLY");

            IList<DbContextOption> dbContextOptions = new List<DbContextOption>();
            if(useMainDb)
            {
                dbContextOptions.Add(GetMainDbContextOption(new DbContextOption
                {
                    Container = "DB_Oracle_ConnStr_Provider",
                    ConnectionString = dbConnectionString,
                    ModuleAssemblyName = "Skynet.Cloud.Framework",
                    Provider = provider,
                    Logger = () => SqlLog.Console
                }, entityAssmbly));
            }

            if(useDbRoute)
            {
                dbContextOptions.AddRange(GetRouteDbContextOptions(new DbContextOption
                {
                    Container = "DB_Oracle_ConnStr_Provider",
                    ConnectionString = dbConnectionString,
                    ModuleAssemblyName = "Skynet.Cloud.Framework",
                    Provider = provider,
                    Logger = () => SqlLog.Console
                }));
            }

            if(dbContextOptions.Count > 0)
                DbConfiguration.Configure(dbContextOptions);
            services
             .AddScopedAssembly(serviceInterfaceAssmbly, serviceImplAssembly);
            services.AddOptions();
            return services.BuildAspectCoreWithAutofacServiceProvider();//接入Autofac和AspectCoreAspectCoreContainer.BuildServiceProvider(services);//接入AspectCore.Injector
        }



        private DbContextOption GetMainDbContextOption(DbContextOption dbContextOption, string moduleAssemblyName = "Skynet.Cloud.Upms.Entity")
        {
            using (var connContext = new ProtocolDbContext(dbContextOption))
            {
                var conn = connContext.Set<ProtocolInfo>().Where(p => p.ProtocalType == ProtocalType.DB && p.ContainerName.Equals("upms")).ToList();
                
                if (conn != null && conn.Count > 0)
                {
                    var item = conn.FirstOrDefault();
                    var connDetail = connContext.Set<ProtocolCfgInfo>().Get(item.CfgID);
                    //var connDetail = details.FirstOrDefault(p => p.CfgID == item.CfgID);
                    if (connDetail != null)
                    {

                        if (connDetail.ProviderName == DbProviderNames.Oracle && !string.IsNullOrWhiteSpace(connDetail.ServerName))
                        {
                            connDetail.Driver = DbProviderNames.Oracle_Managed_ODP;
                            item.DataBaseName = connDetail.ServerName;
                        }
                        var connectStrings = dbContextOption.ConnectionString;
                        if (connDetail.ProviderName == DbProviderNames.Oracle)
                            connectStrings = BuildOracleClientConnectionString(item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
                        else if (connDetail.ProviderName == DbProviderNames.Oracle_Managed_ODP)
                            connectStrings = BuildOracleManagedODPConnectionString(connDetail.Url, connDetail.Port, item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
                        else if (connDetail.ProviderName == DbProviderNames.Oracle_ODP)
                            connectStrings = BuildOracleODPConnectionString(connDetail.Url, connDetail.Port, item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
                        else if (connDetail.ProviderName == DbProviderNames.SqlServer)
                            connectStrings = BuildSqlServerConnectionString(connDetail.Url, connDetail.DesUserID, connDetail.DesPassword, item.DataBaseName, connDetail.Port);
                        else if (connDetail.ProviderName == DbProviderNames.MySQL)
                            connectStrings = BuildMySqlConnectionString(connDetail.Url, connDetail.DesUserID, connDetail.DesPassword, item.DataBaseName, connDetail.Port);
                        return new DbContextOption()
                        {
                            Container = "upms",
                            Provider = connectStrings,
                            ConnectionString = connDetail.ProviderName,
                            ModuleAssemblyName = moduleAssemblyName,
                            Logger = () => SqlLog.Console
                        };

                    }
                }

                return new DbContextOption()
                {
                    Container = "upms",
                    Provider = dbContextOption.Provider,
                    ConnectionString = dbContextOption.ConnectionString,
                    ModuleAssemblyName = moduleAssemblyName,
                    Logger = () => SqlLog.Console
                };

            }
               
        }


        private IEnumerable<DbContextOption> GetRouteDbContextOptions(DbContextOption dbContextOption)
        {
            IDictionary<string, DbContextOption> dbcs = GetDefRouteDbContextOptions(dbContextOption);
            if (dbcs.Count > 0)
            {
                using (var connContext = new ProtocolDbContext(dbContextOption))
                {
                    var conn = connContext.Set<ProtocolInfo>().Where(p => p.ProtocalType == ProtocalType.DB&& dbcs.Keys.Contains(p.ContainerName)).ToList();
                    List<int> cfgIds = conn.Select(p => p.CfgID).ToList(); 
                    var details = connContext.Set<ProtocolCfgInfo>().Where(p => cfgIds.Contains(p.CfgID)).ToList();
                    if (conn != null && conn.Count > 0)
                    {
                        foreach (var item in conn)
                        {
                            if(details != null && details.Count > 0)
                            {
                                var connDetail = details.FirstOrDefault(p => p.CfgID == item.CfgID);
                                if (connDetail != null)
                                {

                                    if (connDetail.ProviderName == DbProviderNames.Oracle && !string.IsNullOrWhiteSpace(connDetail.ServerName))
                                    {
                                        connDetail.Driver = DbProviderNames.Oracle_Managed_ODP;
                                        item.DataBaseName = connDetail.ServerName;
                                    }
                                    var connectStrings = dbContextOption.ConnectionString;
                                    if (connDetail.ProviderName == DbProviderNames.Oracle)
                                        connectStrings = BuildOracleClientConnectionString(item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
                                    else if (connDetail.ProviderName == DbProviderNames.Oracle_Managed_ODP)
                                        connectStrings = BuildOracleManagedODPConnectionString(connDetail.Url, connDetail.Port, item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
                                    else if (connDetail.ProviderName == DbProviderNames.Oracle_ODP)
                                        connectStrings = BuildOracleODPConnectionString(connDetail.Url, connDetail.Port, item.DataBaseName, connDetail.DesUserID, connDetail.DesPassword, item.IsConnPool, connDetail.CONNET_POOL_MAXACTIVE, connDetail.CONNET_POOL_MAXIDLE);
                                    else if (connDetail.ProviderName == DbProviderNames.SqlServer)
                                        connectStrings = BuildSqlServerConnectionString(connDetail.Url, connDetail.DesUserID, connDetail.DesPassword, item.DataBaseName, connDetail.Port);
                                    else if (connDetail.ProviderName == DbProviderNames.MySQL)
                                        connectStrings = BuildMySqlConnectionString(connDetail.Url, connDetail.DesUserID, connDetail.DesPassword, item.DataBaseName, connDetail.Port);
                                    if (dbcs.ContainsKey(item.ContainerName))
                                    {
                                        dbcs[item.ContainerName].ConnectionString = connectStrings;
                                        dbcs[item.ContainerName].Provider = connDetail.ProviderName;
                                    }
                                    else
                                    {
                                        var key = dbcs.Keys.FirstOrDefault(p => p.StartsWith(item.ContainerName));
                                        if (!string.IsNullOrEmpty(key))
                                        {
                                            dbcs[key].ConnectionString = connectStrings;
                                            dbcs[key].Provider = connDetail.ProviderName;
                                        }
                                    }


                                }
                            }
                        }

                            
                    }
                }
            }
            

            return dbcs.Values;

        }

        public IDictionary<string, DbContextOption> GetDefRouteDbContextOptions(DbContextOption dbContextOption)
        {
            IDictionary<string, DbContextOption> dbcs = new Dictionary<string, DbContextOption>();

            foreach (NetType item in Enum.GetValues(typeof(NetType)))
            {
                foreach (DataBaseType db in Enum.GetValues(typeof(DataBaseType)))
                {
                    string key = db== DataBaseType.Normal? string.Format("{0}", (int)item):string.Format("{0}_{1}", (int)item,(int)db);
                    if (!dbcs.ContainsKey(key))
                    {
                        string mappFile = getMappingFile(item, db);
                        if (!mappFile.IsNullOrEmpty())
                        {
                            dbcs.Add(key, new DbContextOption()
                            {
                                Container = key,
                                Provider = dbContextOption.Provider,
                                ConnectionString = dbContextOption.ConnectionString,
                                MappingFile = getMappingFile(item, db),
                                ModuleAssemblyName = "Skynet.Cloud."

                            });
                        }

                    }
                }

            }
            return dbcs;
        }

        #region
        private string getMappingFile(NetType netType, DataBaseType dataBaseType)
        {
            
            var path = System.AppDomain.CurrentDomain.BaseDirectory ?? AppDomain.CurrentDomain.RelativeSearchPath;
            var files = Directory.EnumerateFiles(path, string.Format("uway.{0}.{1}.mapping.xml", netType,dataBaseType));
            if (files.Any())
                return string.Format("uway.{0}.{1}.mapping.xml", netType, dataBaseType);
            else
                return string.Empty;
        }
       

        private string BuildOracleClientConnectionString(string datasource, string uid, string pwd, bool IsConnPool, int CONNET_POOL_MAXACTIVE, int CONNET_POOL_MAXIDLE)
        {
            return string.Format("data source={0};user id={1};password={2};Pooling={3};Max Pool Size={4};Min Pool Size={5};", datasource, uid, pwd, IsConnPool, CONNET_POOL_MAXIDLE, CONNET_POOL_MAXACTIVE);
        }

        private string BuildOracleManagedODPConnectionString(string ip, int port, string datasource, string uid, string pwd, bool IsConnPool, int CONNET_POOL_MAXACTIVE, int CONNET_POOL_MAXIDLE)
        {
            return string.Format("data source={0}:{1}/{2};user id={3};password={4};Pooling={5};Max Pool Size={6};Min Pool Size={7};", ip, port, datasource, uid, pwd, IsConnPool, CONNET_POOL_MAXACTIVE, CONNET_POOL_MAXIDLE);
        }

        private string BuildOracleODPConnectionString(string ip, int port, string datasource, string uid, string pwd, bool IsConnPool, int CONNET_POOL_MAXACTIVE, int CONNET_POOL_MAXIDLE)
        {
            return string.Format(@"(DESCRIPTION =(ADDRESS_LIST =
                                    (ADDRESS = (PROTOCOL = TCP)(HOST = {0})(PORT = {1}))
                                    )
                                    (CONNECT_DATA =
                                    (SERVICE_NAME = {2})
                                   )
                                    );Persist Security Info=True;User ID={3};Password={4};;Pooling={5};Max Pool Size={6};Min Pool Size={7};", ip,
                                    port,
                                     datasource,
                                     uid, pwd, IsConnPool, CONNET_POOL_MAXIDLE, CONNET_POOL_MAXACTIVE);
        }
        #endregion

        #region
        public string BuildMySqlConnectionString(string url, string uid, string pwd, string database, int port)
        {
            return string.Format("server = {0}; User Id = {1}; password = {2}; database = {3}; port = {4}; Charset = utf8; Persist Security Info = True",
                url, uid, pwd, database, port);
        }

        public string BuildSqlServerConnectionString(string url, string uid, string pwd, string database, int port)
        {
            return string.Format("Data Source = {0};Port={4};Initial Catalog = {1};User ID = {2}; Password={3};Integrated Security =false",
                url, database, uid, pwd, port);
        }


        public string BuildSqlServerConnectionString(string url, string uid, string pwd, string database)
        {
            return string.Format("Data Source = {0};Initial Catalog = {1};User ID = {2}; Password={3};Integrated Security =false",
                url, database, uid, pwd);
        }
        #endregion

    }
}
