using UWay.Skynet.Cloud.Threading;

namespace UWay.Skynet.Cloud.Data
{

    /// <summary>
    /// 工作单元门面类
    /// </summary>
    public static class UnitOfWork
    {
        static string DbConfigurationName { get; set; }

        ///// <summary>
        ///// 得到当前工作单元对象
        ///// </summary>
        //public static IUnitOfWork Current
        //{
        //    get
        //    {
        //        if (string.IsNullOrEmpty(UnitOfWork.DbConfigurationName))
        //        {
        //            var cfg = DbConfiguration.DefaultDbConfiguration;
        //            if (cfg == null)
        //                cfg = DbConfiguration.Configure();
        //            UnitOfWork.DbConfigurationName = cfg.Name;
        //        }

        //        return Get(UnitOfWork.DbConfigurationName);
        //    }
        //}

        /// <summary>
        /// 初始化才可以使用
        /// </summary>
        /// <param name="dbConfigurationName"></param>
        /// <returns></returns>
        public static IDbContext Get(NetType netType, DataBaseType dataBaseType = DataBaseType.Normal)
        {

            
            return Get(new DbContextOption { Container = (dataBaseType == DataBaseType.Normal ? string.Format("{0}", (int)netType): string.Format("{0}_{1}", (int)netType)) });
        }

        /// <summary>
        /// 初始化才可以使用
        /// </summary>
        /// <param name="dbConfigurationName"></param>
        /// <returns></returns>
        public static IDbContext Get(string  containerName)
        {
            

            return Get(new DbContextOption { Container = containerName });
        }

        /// <summary>
        /// 得到工作单元对象
        /// </summary>
        /// <param name="dbConfigurationName"></param>
        /// <returns></returns>
        public static IDbContext Get(DbContextOption dbContextOption)
        {
            Guard.NotNullOrEmpty(dbContextOption.Container, "dbConfigurationName");


            var key = string.Concat("__", dbContextOption.Container, "__");
            var ctx = Local.Get(key) as IDbContext;
            if (ctx == null)
            {
                var cfg = DbConfiguration.Get(dbContextOption);
                ctx = cfg.CreateDbContext();
                Local.Set(key, ctx);
            }

            return ctx;
        }
        /// <summary>
        /// 释放工作单元资源
        /// </summary>
        public static void Dispose()
        {
            foreach (var name in DbConfiguration.Items.Keys)
            {
                var key = string.Concat("__", name, "__");
                var ctx = Local.Get(key) as IDbContext;
                if (ctx != null)
                {
                    Local.Remove(key);
                    ctx.Dispose();
                }
            }
        }
    }

}
