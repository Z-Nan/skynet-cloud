using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Steeltoe.Common.Discovery;
using UWay.Skynet.Cloud.Nacos;

namespace Steeltoe.Discovery.Nacos.Discovery
{
    public class NacosDiscoveryClient : NacosNamingClient, IDiscoveryClient
    {
        private readonly IServiceInstance _thisServiceInstance;

        public NacosDiscoveryClient(ILoggerFactory loggerFactory
            , IOptionsMonitor<NacosDiscoveryOptions> optionAccs
            , IHttpClientFactory clientFactory):this(loggerFactory, BuilderNacosConfig(optionAccs), clientFactory)
        {
            
        }

        public static NacosClientConfiguration BuilderNacosConfig(IOptionsMonitor<NacosDiscoveryOptions> optionAccs)
        {
            return new NacosClientConfiguration() {
               ServerAddresses = optionAccs.CurrentValue.HostName,
               Port = optionAccs.CurrentValue.Port,
               ClusterName = optionAccs.CurrentValue.Cluster,
               GroupName = optionAccs.CurrentValue.GroupName,
               ServiceName = optionAccs.CurrentValue.ServiceName,
              
            };
        }



        public NacosDiscoveryClient(ILoggerFactory loggerFactory
            , NacosClientConfiguration optionAccs
            , IHttpClientFactory clientFactory
            ) : base(loggerFactory, optionAccs, clientFactory)
        {
            _thisServiceInstance = new ThisServiceInstance(optionAccs);
        }

        public string Description =>  "Spring Cloud Nacos";

        public IList<string> Services =>Task.Run(async () =>
                {
                    return await ListServiceAsync();
         }).Result;

        public IList<IServiceInstance> GetInstances(string serviceId)
        {
            var request = new ListInstancesRequest() {
                ServiceName = serviceId
            };

            ListInstancesResult result = Task.Run(async () =>
            {
                return await ListInstancesAsync(request);
            }).Result;
            IList<IServiceInstance> instances = new List<IServiceInstance>();
            if(result == null&& result.Hosts != null)
            {
                foreach(var host in result.Hosts)
                {
                    instances.Add(new NacosServiceInstance(host));
                }
            }
            
            return instances;

        }

        public IServiceInstance GetLocalServiceInstance()
        {
            return _thisServiceInstance;
        }

        public Task ShutdownAsync()
        {

            var removeRequest = new RemoveInstanceRequest
            {
                ServiceName = _options.ServiceName,
                Ip = _options.ServerAddresses,
                Port = _options.Port,
                GroupName = _options.GroupName,
                NamespaceId = _options.Namespace,
                ClusterName = _options.ClusterName,
                Ephemeral = false
            };

            return RemoveInstanceAsync(removeRequest);
        }
    }
}
