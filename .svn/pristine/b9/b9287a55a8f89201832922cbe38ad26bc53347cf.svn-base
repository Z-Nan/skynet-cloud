using System;
using System.Data;
using System.Data.Common;
using UWay.Skynet.Cloud.Data.Common;
using UWay.Skynet.Cloud.Data.Driver;
using UWay.Skynet.Cloud.ExceptionHandle;

namespace UWay.Skynet.Cloud.Data
{
    class DbHelper : ConnectionHost, IDbHelper
    {

        internal DbConfiguration dbConfiguration;
        public IDriver Driver { get; set; }

        public DbConnection Connection { get { return connection; } }

        public DbConfiguration DbConfiguration { get { return dbConfiguration; } }

        public CommandType CommandType;

        ISqlLog log
        {
            get
            {
                return dbConfiguration.sqlLogger();
            }
        }


        public DbParameter Parameter(string name, object value)
        {
            var p = dbConfiguration.DbProviderFactory.CreateParameter();
            p.ParameterName = name;
            p.Value = value;
            return p;
        }


        public int ExecuteNonQuery(string sql, dynamic namedParameters, bool isAutoClose = true)
        {
            Guard.NotNullOrEmpty(sql, "sql");
            try
            {
                using (DbCommand cmd = Driver.CreateCommand(connection, sql, namedParameters))
                {
                    log.AddCommand(cmd.CommandText, cmd.Parameters);
                    cmd.CommandType = CommandType;
                    if (connection.State != ConnectionState.Open)
                        connection.Open();
                    return cmd.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                log.AddMessage(string.Format("Message:{0}\r\nStackTrack:{1}", ex.Message, ex.StackTrace));
                throw new PersistenceException(ex.Message, ex);
            }
            finally
            {
                if(isAutoClose == true)
                {
                    if (connection.State != ConnectionState.Closed)
                        connection.Close();
                }
                AddAttachInfo();
                log.Log();
            }

        }

        public DbDataReader ExecuteReader(string sql, dynamic namedParameters, bool isAutoClose = true)
        {
            Guard.NotNullOrEmpty(sql, "sql");

            try
            {
                using (var cmd = Driver.CreateCommand(connection, sql, namedParameters))
                {
                    log.AddCommand(cmd.CommandText, cmd.Parameters);
                    cmd.CommandType = CommandType;
                    if (connection.State != ConnectionState.Open)
                        connection.Open();
                    return cmd.ExecuteReader();
                }
            }
            catch (Exception ex)
            {
                log.AddMessage(string.Format("Message:{0}\r\nStackTrack:{1}", ex.Message, ex.StackTrace));
                throw new QueryException(ex.Message, ex);
            }
            finally
            {
                if (isAutoClose == true)
                {
                    if (connection.State != ConnectionState.Closed)
                        connection.Close();
                }
                AddAttachInfo();
                log.Log();
            }
        }

        public DataTable ExecuteDataTable(string sql, dynamic namedParameters, bool isAutoClose = true)
        {

            Guard.NotNullOrEmpty(sql, "sql");

            try
            {
                using (var cmd = Driver.CreateCommand(connection, sql, namedParameters))
                {
                    log.AddCommand(cmd.CommandText, cmd.Parameters);
                    cmd.CommandType = CommandType;
                    var adp = this.dbConfiguration.DbProviderFactory.CreateDataAdapter();
                    adp.SelectCommand = cmd;
                    var tb = new DataTable("Table1");
                    adp.Fill(tb);
                    return tb;
                }
            }
            catch (Exception ex)
            {
                
                log.AddMessage(string.Format("Message:{0}\r\nStackTrack:{1}", ex.Message, ex.StackTrace));
                throw new QueryException(ex.Message, ex);
            }
            finally
            {
                if (isAutoClose == true)
                {
                    if (connection.State != ConnectionState.Closed)
                        connection.Close();
                }
                AddAttachInfo();
                log.Log();
            }
        }

        private void AddAttachInfo() {
            log.AddMessage(string.Format("-- Key:" + DbConfiguration.ConnectionString.Split(';')[0]));
            log.AddMessage("-- DbProviderName:" + DbConfiguration.DbProviderName);
            log.AddMessage("-------------------Sql End----------------");
        }


        public DataSet ExecuteDataSet(string sql, dynamic namedParameters, bool isAutoClose = true)
        {

            Guard.NotNullOrEmpty(sql, "sql");

            try
            {
                using (var cmd = Driver.CreateCommand(connection, sql, namedParameters))
                {
                    log.AddCommand(cmd.CommandText, cmd.Parameters);
                    cmd.CommandType = CommandType;
                    var adp = this.dbConfiguration.DbProviderFactory.CreateDataAdapter();
                    adp.SelectCommand = cmd;
                    var ds = new DataSet();
                    adp.Fill(ds);
                    return ds;
                }
            }
            catch (Exception ex)
            {
                log.AddMessage(string.Format("Message:{0}\r\nStackTrack:{1}", ex.Message, ex.StackTrace));
                throw new QueryException(ex.Message, ex);
            }
            finally
            {
                if (isAutoClose == true)
                {
                    if (connection.State != ConnectionState.Closed)
                        connection.Close();
                }
                AddAttachInfo();
                log.Log();
            }
        }


        public object ExecuteScalar(string sql, dynamic namedParameters, bool isAutoClose = true)
        {

            Guard.NotNullOrEmpty(sql, "sql");

            try
            {
                using (var cmd = Driver.CreateCommand(connection, sql, namedParameters))
                {
                    log.AddCommand(cmd.CommandText, cmd.Parameters);
                    cmd.CommandType = CommandType;
                    if (connection.State != ConnectionState.Open)
                        connection.Open();
                    return cmd.ExecuteScalar();
                }
            }
            catch (Exception ex)
            {
                log.AddMessage(string.Format("Message:{0}\r\nStackTrack:{1}", ex.Message, ex.StackTrace));
                throw new QueryException(ex.Message, ex);
            }
            finally
            {
                if (isAutoClose == true)
                {
                    if (connection.State != ConnectionState.Closed)
                        connection.Close();
                }
                AddAttachInfo();
                //log.AddMessage("")
                log.Log();
            }
        }

        public DataTable ExecutePageDataTable(string sql, long skip, long take, dynamic nameparameters, out long rowCount, bool isAutoClose = true)
        {

            Guard.NotNullOrEmpty(sql, "sql");
            //sql = GetReplaceSql(sql);
            PagingHelper.SQLParts parts;
            rowCount = 0;
            if (!PagingHelper.SplitSQL(sql, out parts))
            {
                throw new Exception("Unable to parse SQL statement for paged query");
            }
            var sqlCount = parts.sqlCount;
            var pageSql = Driver.BuildPageQuery(skip, take, parts, nameparameters);
            if (connection.State != ConnectionState.Open)
                connection.Open();
            var tempRowCount = 0;
            DataTable dt = null;
            try
            {
                System.Threading.Tasks.Parallel.Invoke(() => tempRowCount = (int)ExecuteScalar(parts.sqlCount, nameparameters, false), () => dt = ExecuteDataTable(pageSql, nameparameters, false));
            }
            catch (Exception ex)
            {
                log.AddMessage(string.Format("Message:{0}\r\nStackTrack:{1}", ex.Message, ex.StackTrace));
                throw new QueryException(ex.Message, ex);
            }
            finally {
                if (isAutoClose == true)
                {
                    if (connection.State != ConnectionState.Closed)
                        connection.Close();
                }
                AddAttachInfo();
                log.Log();
            }
           
            rowCount = tempRowCount;
          
            return dt;
        }


    }
}
