using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using UWay.Skynet.Cloud.Nacos;

namespace Steeltoe.Discovery.Nacos.Discovery
{
    public class TtlScheduler : IScheduler
    {
        internal readonly ConcurrentDictionary<string, Timer> _serviceHeartbeats = new ConcurrentDictionary<string, Timer>(StringComparer.OrdinalIgnoreCase);

        internal readonly INacosClient _client;

        private readonly IOptionsMonitor<NacosDiscoveryOptions> _optionsMonitor;
        private readonly NacosDiscoveryOptions _options;
        private readonly ILogger<TtlScheduler> _logger;

        internal NacosDiscoveryOptions Options
        {
            get
            {
                if (_optionsMonitor != null)
                {
                    return _optionsMonitor.CurrentValue;
                }

                return _options;
            }
        }

        internal NacosHeartbeatOptions HeartbeatOptions
        {
            get
            {
                return Options.Heartbeat;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TtlScheduler"/> class.
        /// </summary>
        /// <param name="optionsMonitor">configuration options</param>
        /// <param name="client">the Nacos client</param>
        /// <param name="logger">optional logger</param>
        public TtlScheduler(IOptionsMonitor<NacosDiscoveryOptions> optionsMonitor, INacosClient client, ILogger<TtlScheduler> logger = null)
        {
            _optionsMonitor = optionsMonitor;
            _client = client;
            _logger = logger;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TtlScheduler"/> class.
        /// </summary>
        /// <param name="options">configuration options</param>
        /// <param name="client">the Nacos client</param>
        /// <param name="logger">optional logger</param>
        public TtlScheduler(NacosDiscoveryOptions options, INacosClient client, ILogger<TtlScheduler> logger = null)
        {
            _options = options;
            _client = client;
            _logger = logger;
        }

        /// <inheritdoc/>
        public void Add(string instanceId)
        {
            if (string.IsNullOrWhiteSpace(instanceId))
            {
                throw new ArgumentException(nameof(instanceId));
            }

            _logger?.LogDebug("Add {instanceId}", instanceId);

            if (HeartbeatOptions != null)
            {
                var interval = HeartbeatOptions.ComputeHearbeatInterval();

                var checkId = instanceId;
                if (!checkId.StartsWith("service:"))
                {
                    checkId = "service:" + checkId;
                }

                var timer = new Timer(async s => { await _client.SendHeartbeatAsync(new SendHeartbeatRequest() {
                    ServiceName = Options.ServiceName,
                    
                    BeatInfo = new BeatInfo()
                    {
                        ServiceName = Options.ServiceName,
                        Scheduled = true,
                        Cluster = Options.Cluster,
                        Ip = Options.IpAddress,
                        Port = Options.Port,
                        Weight = Options.Wieght,
                        Metadata =Options.Metadata
                    },
                    Ephemeral = Options.IsHeartBeatEnabled,
                    GroupName = Options.GroupName

                }); }, checkId, TimeSpan.Zero, interval);
                _serviceHeartbeats.AddOrUpdate(instanceId, timer, (key, oldTimer) =>
                {
                    oldTimer.Dispose();
                    return timer;
                });
            }
        }

        /// <inheritdoc/>
        public void Remove(string instanceId)
        {
            if (string.IsNullOrWhiteSpace(instanceId))
            {
                throw new ArgumentException(nameof(instanceId));
            }

            _logger?.LogDebug("Remove {instanceId}", instanceId);

            if (_serviceHeartbeats.TryRemove(instanceId, out var timer))
            {
                timer.Dispose();
            }
        }

        /// <summary>
        /// Remove all heart beats from scheduler
        /// </summary>
        public void Dispose()
        {
            foreach (var instance in _serviceHeartbeats.Keys)
            {
                Remove(instance);
            }
        }

        //private Task PassTtl(string serviceId)
        //{
        //    _logger?.LogDebug("Sending Nacos heartbeat for: {serviceId} ", serviceId);

        //    try
        //    {
        //        return _client.se(serviceId, "ttl");
        //    }
        //    catch (Exception e)
        //    {
        //        _logger?.LogError(e, "Exception sending Nacos heartbeat for: {serviceId} ", serviceId);
        //    }

        //    return Task.CompletedTask;
        //}
    }
}
