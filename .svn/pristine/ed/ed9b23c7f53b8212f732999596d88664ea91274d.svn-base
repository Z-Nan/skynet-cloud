using System;
using System.Data.Common;
using System.Diagnostics;
using System.Reflection;
using UWay.Skynet.Cloud.Data.Common;

namespace UWay.Skynet.Cloud.Data
{
    class DebugSqlLog : ISqlLog
    {
        static readonly string Version = "-- ULinq Version:" + Assembly.GetExecutingAssembly().GetName().Version.ToString();

        public void AddMessage(string message)
        {
            Debug.WriteLine(message);
        }

        public void AddCommand(string commandText, NamedParameter[] parameters, object[] paramValues)
        {

            Debug.WriteLine(commandText);
            if (paramValues != null)
                this.AddParameters(parameters, paramValues);
            Debug.WriteLine("");
            Debug.WriteLine(Version);

            var dbContext = ExecuteContext.DbContext;
            if (dbContext != null)
                Debug.WriteLine("-- DbProviderName:" + dbContext.dbConfiguration.DbProviderName);

            var dialect = ExecuteContext.Dialect;
            if (dialect != null)
                Debug.WriteLine("-- Dialect:" + dialect.GetType().Name);
        }

        public void AddParameters(NamedParameter[] parameters, object[] paramValues)
        {
            if (paramValues != null)
            {
                for (int i = 0, n = parameters.Length; i < n; i++)
                {
                    var p = parameters[i];
                    var v = paramValues[i];

                    if (v == null || v == DBNull.Value)
                        Debug.WriteLine(string.Format("-- {0}:(DbType = {1}, Length = {2}, Value = NULL)", p.Name, p.sqlType.DbType, p.sqlType.Length));
                    else
                        Debug.WriteLine(string.Format("-- {0}:(DbType = {1}, Length = {2}, Value = {3})", p.Name, p.sqlType.DbType, p.sqlType.Length, v));
                }
            }
        }

        public void AddCommand(string commandText, DbParameterCollection paramters)
        {
            if (paramters != null)
            {
                foreach (DbParameter v in paramters)
                {

                    if (v == null || v.Value == DBNull.Value)
                        Debug.WriteLine(string.Format("-- {0}:(DbType = {1}, Length = {2}, Value = NULL)", v.ParameterName, v.DbType, v.Size), "Sql");
                    else
                        Debug.WriteLine(string.Format("-- {0}:(DbType = {1}, Length = {2}, Value = {3})", v.ParameterName, v.DbType, v.Size, v.Value), "Sql");
                }
            }
        }

        public void Log()
        {
            
        }

        public void LogError(string message)
        {
            Debug.WriteLine(message);
        }

        public void LogError(string message, Exception ex)
        {
            Debug.WriteLine(string.Format("{0}\r\nstacktrace:{1}\r\nmessage:{2}",message,ex.StackTrace, ex.Message));
        }
    }
}
