using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using log4net;
using log4net.Repository;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using UWay.Skynet.Cloud.Data;
using UWay.Skynet.Cloud.Helpers;
using UWay.Skynet.Cloud.IoC;
using UWay.Skynet.Cloud.Protocal;
using UWay.Skynet.Cloud.Extensions;
using UWay.Skynet.Cloud.Web.Core;
using Microsoft.AspNetCore.Hosting.Server.Features;
using UWay.Skynet.Cloud.Web.Core.Filters;

namespace Skynet.Cloud.Web.Demo
{
    public class Startup:BasicStartup
    {

        public Startup(IConfiguration configuration):base(configuration)
        {
            
        }

        public IServiceProvider ConfigureServices(IServiceCollection services)
        {
            return BacicConfigureServices(services);
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            var bindingUrl = app.ServerFeatures.Get<IServerAddressesFeature>().Addresses.First();
            BasicConfigure(app, env);
        }

        public override void RegistryCookie(IServiceCollection services)
        {
            services.Configure<CookiePolicyOptions>(options =>
            {
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.
                options.CheckConsentNeeded = context => true;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });


            services.AddMvc(option =>
            {
                option.Filters.Add(new GlobalExceptionFilter());
            }).SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
        }




   

        public override void RegistrySwagger(IServiceCollection services)
        {
            
        }

        public override void ConfigureEnviroment(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            app.UseStaticFiles();
            app.UseCookiePolicy();

           
        }

        public override void ConfigureSwagger(IApplicationBuilder app)
        {
            
        }

        public override void ConfigureMvc(IApplicationBuilder app)
        {
            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });
        }

        public override void ConfigureNacos(IApplicationBuilder app)
        {
            throw new NotImplementedException();
        }



        #region

        #endregion

        #region

        #endregion

    }
}
