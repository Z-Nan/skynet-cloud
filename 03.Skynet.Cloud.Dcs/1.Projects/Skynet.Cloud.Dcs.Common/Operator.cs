using System;
using System.Collections.Generic;
using System.Text;
using UWay.Skynet.Cloud.Dcs.Entity;

namespace UWay.Skynet.Cloud.Dcs.Common
{
    public class Operator
    {
        //绝对优先级表
        private static int[,] _priorityTable =
        {
			//0,1,2,...，每10个一空
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//unknown
			{0,2,2,0,0,0,2,2,0,0, 2,2,2,2,2,2,2,2,0,0, 0,0,0,0,2,2,2,2,0,2, 2,2,2,2,2,2,2,2,0,2},	//ln
			{0,2,2,0,0,0,2,2,0,0, 2,2,2,2,2,2,2,2,0,0, 0,0,0,0,2,2,2,2,0,2, 2,2,2,2,2,2,2,2,0,2},	//lg
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,0,2,2,2, 2,2,2,2,2,2,2,2,0,2},	//log
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,0,2,2,2, 2,2,2,2,2,2,2,2,0,2},	//pow

			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,0,2,2,2, 2,2,2,2,2,2,2,2,0,2},	//cbrt
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,0,2,2,2, 2,2,2,2,2,2,2,2,0,2},	//else
			{0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0}, //!
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved

			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//sin
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//end
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//when
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//case
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//tg

			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//abs
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//atg
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//then
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//plus
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//minus

			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//time
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//divide
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,2,0,2,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,2,2,2,0,0,2, 2,2,2,2,2,2,2,2,0,0},	//mod
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,0,2,3,2,0,0,2, 2,2,2,2,2,2,2,2,0,2},	//(

			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//)
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//ans
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//sto
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//clr
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//ax

			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//bx
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//cx
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//dx
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//ex
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//fx

			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//e
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//pi
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//number
			{0,2,2,2,2,0,2,2,2,2, 2,2,2,2,2,2,2,2,2,2, 2,2,0,2,2,2,2,2,2,2, 2,2,2,2,2,2,2,2,3,2},	//sharp
            {0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//negative
		};
        //相对优先级表
        private static int[,] _priorityTable2 =
        {
			//0,1,2,...，每10个一空
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//unknown
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,1,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//ln
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,1,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//lg
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,1,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//log
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,1,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//pow

			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved
			{0,2,2,0,0,0,2,2,0,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//cbrt
			{0,2,2,0,0,0,2,2,0,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//else
			{0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0}, //!
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved

			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//sin
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//end
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//when
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//case
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//tg

			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//abs
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//atg
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//then
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 2,2,0,2,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//plus
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 2,2,0,2,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//minus

			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,2,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//time
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,2,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//divide
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved
			{0,0,0,0,0,0,0,0,2,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//mod
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,2,2, 2,2,0,2,2,3,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//(

			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//)
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//ans
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//sto
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//clr
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//ax

			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//bx
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//cx
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//dx
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//ex
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//fx

			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//e
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//pi
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//number
			{0,2,2,2,2,0,2,2,2,2, 2,2,2,2,2,2,2,2,2,2, 2,2,0,2,2,2,0,2,2,2, 2,2,2,2,2,2,2,2,3,2},	//sharp
            {0,2,2,0,0,0,2,2,0,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2}	//negative
		};


        /// <summary>
        /// 根据运算符返回对应的运算目数
        /// </summary>
        /// <param name="Phrase">运算符</param>
        /// <returns>运算目数</returns>
        public static OperandType OperandCount(PhraseTypeEnum pt)
        {
            //分析运算符的目数
            if (pt == PhraseTypeEnum.end || pt == PhraseTypeEnum.sin || pt == PhraseTypeEnum.when ||
                pt == PhraseTypeEnum.case_ || pt == PhraseTypeEnum.case_ || pt == PhraseTypeEnum.then ||
                pt == PhraseTypeEnum.atg || pt == PhraseTypeEnum.cbrt || pt == PhraseTypeEnum.else_ ||
                pt == PhraseTypeEnum.lg || pt == PhraseTypeEnum.ln || pt == PhraseTypeEnum.tg || pt == PhraseTypeEnum.abs || pt == PhraseTypeEnum.equal || pt == PhraseTypeEnum.greater || pt == PhraseTypeEnum.less)
                return OperandType.O1;
            else if (pt == PhraseTypeEnum.divide || pt == PhraseTypeEnum.plus || pt == PhraseTypeEnum.minus ||
                pt == PhraseTypeEnum.mutiple || pt == PhraseTypeEnum.mod || pt == PhraseTypeEnum.log)
                return OperandType.O2;
            else
                return OperandType.O0;
        }
        /// <summary>
        /// 根据词的类型返回优先级（obselete）
        /// </summary>
        /// <param name="pt">词类</param>
        /// <returns>优先级</returns>
        [Obsolete()]
        public static OperatorPriority GetPriority(PhraseTypeEnum pt)
        {
            if (pt == PhraseTypeEnum.ln || pt == PhraseTypeEnum.log || pt == PhraseTypeEnum.lg)
                return OperatorPriority.P5;
            else if (pt == PhraseTypeEnum.sin || pt == PhraseTypeEnum.end || pt == PhraseTypeEnum.tg ||
                pt == PhraseTypeEnum.abs || pt == PhraseTypeEnum.when || pt == PhraseTypeEnum.case_ ||
                pt == PhraseTypeEnum.atg || pt == PhraseTypeEnum.then)
                return OperatorPriority.P4;
            else if (pt == PhraseTypeEnum.greater)
                return OperatorPriority.P6;
            else if (pt == PhraseTypeEnum.less)
                return OperatorPriority.P6;
            else if (pt == PhraseTypeEnum.equal)
                return OperatorPriority.P6;
            else if (pt == PhraseTypeEnum.plus)
                return OperatorPriority.P1;
            else if (pt == PhraseTypeEnum.minus)
                return OperatorPriority.P1;
            else if (pt == PhraseTypeEnum.mutiple)
                return OperatorPriority.P2;
            else if (pt == PhraseTypeEnum.mod || pt == PhraseTypeEnum.divide)
                return OperatorPriority.P2;
            else if (pt == PhraseTypeEnum.leftbracket)
                return OperatorPriority.P0;
            else if (pt == PhraseTypeEnum.sharp)
                return OperatorPriority.P0;
            else
                return OperatorPriority.Unknown;
        }
        /// <summary>
        /// 前后邻近符号（包括运算符和数符）比较
        /// </summary>
        /// <param name="prePt">前一个符号</param>
        /// <param name="postPt">后一个符号</param>
        /// <returns>优先级比较值</returns>
        public static PriorityCmpType OperatorCmp(PhraseTypeEnum prePt, PhraseTypeEnum postPt)
        {
            int result = _priorityTable[(int)prePt, (int)postPt];
            return (PriorityCmpType)result;
        }
        /// <summary>
        /// 有间隔相邻符号比较（只包含数符）
        /// </summary>
        /// <param name="prePt">前一个符号</param>
        /// <param name="postPt">后一个符号</param>
        /// <returns>优先级比较值</returns>
        public static PriorityCmpType OperatorCmp2(PhraseTypeEnum prePt, PhraseTypeEnum postPt)
        {
            int result = _priorityTable2[(int)prePt, (int)postPt];
            return (PriorityCmpType)result;
        }
    }
}
